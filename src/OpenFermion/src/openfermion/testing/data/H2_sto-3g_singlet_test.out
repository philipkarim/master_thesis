
    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                               Psi4 1.4 release

                         Git: Rev {HEAD} 9485035 


    D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,
    M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,
    A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,
    R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,
    J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,
    B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,
    K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,
    F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,
    J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002

                            Additional Code Authors
    E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,
    J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,
    P. Verma, and M. H. Lechner

             Previous Authors, Complete List of Code Contributors,
                       and Citations for Specific Modules
    https://github.com/psi4/psi4/blob/master/codemeta.json
    https://github.com/psi4/psi4/graphs/contributors
    http://psicode.org/psi4manual/master/introduction.html#citing-psifour

    -----------------------------------------------------------------------


    Psi4 started on: Monday, 27 June 2022 02:18AM

    Process ID: 54207
    Host:       Philips-MacBook-Pro.local
    PSIDATADIR: /Users/philipniane/psi4conda/share/psi4
    Memory:     500.0 MiB
    Threads:    1
    
  ==> Input File <==

--------------------------------------------------------------------------
"""This is a template for psi4 input format."""
import numpy
import sys

from openfermion.config import *
from openfermion.chem import MolecularData
from openfermion.ops import general_basis_change

from numpy import array

sys.path.append('/Users/philipniane/psi4conda/lib/python3.8/site-packages/openfermionpsi4')
from _psi4_conversion_functions import *


# Set memory that job can use in megabytes.
memory 8000 mb

# Initialize molecular data.
_description = 'test'
if _description == 'None':
    _description = None
molecule = MolecularData([['H', [0, 0, 0]], ['H', [0, 0, 1.4]]],
                         'sto-3g',
                         1,
                         0,
                         _description,
                          filename='/Users/philipniane/Documents/thesis/master_thesis/src/OpenFermion/src/openfermion/testing/data/H2_sto-3g_singlet_test')

# Set molecular geometry and symmetry.
molecule mol {
H 0 0 0
H 0 0 1.4
symmetry c1
}
mol.set_multiplicity(1)
mol.set_molecular_charge(0)

# Set reference and guess.
if molecule.multiplicity == 1:
    set reference rhf
    set guess sad
else:
    set reference rohf
    set guess gwh

# Set global parameters of calculation.
set globals {
    basis sto-3g
    freeze_core false
    fail_on_maxiter True
    df_scf_guess false
    opdm true
    tpdm true
    soscf false
    scf_type pk
    maxiter 1e6
    num_amps_print 1e6
    r_convergence 1e-6
    d_convergence 1e-6
    e_convergence 1e-6
    ints_tolerance EQUALITY_TOLERANCE
    damping_percentage 0
}

# Run self-consistent field (SCF) calculation.
if True:
    try:
        hf_energy, hf_wavefunction = energy('scf', return_wfn=True)
        if False:
            print('Hartree-Fock energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, hf_energy))
    except:
        if False:
            print('WARNING: SCF calculation failed.')
        else:
            raise
    finally:
        # Get orbitals and Fock matrix.
        molecule.hf_energy = hf_energy
        molecule.nuclear_repulsion = mol.nuclear_repulsion_energy()
        molecule.canonical_orbitals = numpy.asarray(hf_wavefunction.Ca())
        molecule.overlap_integrals = numpy.asarray(hf_wavefunction.S())
        molecule.n_orbitals = molecule.canonical_orbitals.shape[0]
        molecule.n_qubits = 2 * molecule.n_orbitals
        molecule.orbital_energies = numpy.asarray(hf_wavefunction.epsilon_a())
        molecule.fock_matrix = numpy.asarray(hf_wavefunction.Fa())

        # Get integrals using MintsHelper.
        mints = MintsHelper(hf_wavefunction.basisset())
        molecule.one_body_integrals = general_basis_change(
            numpy.asarray(mints.ao_kinetic()), molecule.canonical_orbitals, (1, 0))
        molecule.one_body_integrals += general_basis_change(
            numpy.asarray(mints.ao_potential()), molecule.canonical_orbitals, (1, 0))
        two_body_integrals = numpy.asarray(mints.ao_eri())
        two_body_integrals.reshape((molecule.n_orbitals, molecule.n_orbitals,
                                    molecule.n_orbitals, molecule.n_orbitals))
        two_body_integrals = numpy.einsum('psqr', two_body_integrals)
        two_body_integrals = general_basis_change(
            two_body_integrals, molecule.canonical_orbitals, (1, 1, 0, 0))
        molecule.two_body_integrals = two_body_integrals
        molecule.save()


# Perform MP2 energy calculation if there are at least two electrons.
if False:
    try:
        assert molecule.n_electrons > 1
        mp2_energy = energy('mp2')
        if False:
            print('MP2 energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, mp2_energy))
    except:
        if False:
            print('WARNING: MP2 calculation failed.')
        else:
            raise
    else:
        molecule.mp2_energy = mp2_energy
        molecule.save()


# Perform configuration interaction singles and doubles (CISD) calculation.
if False:
    set qc_module detci
    try:
        cisd_energy, cisd_wavefunction = energy('cisd', return_wfn=True)
        if False:
            print('CISD energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, cisd_energy))
    except:
        if False:
            print('WARNING: CISD calculation failed.')
        else:
            raise
    else:
        # For the functions below, "a" and "b" refer to "up and "down" spins.
        molecule.cisd_energy = cisd_energy

        # Get 1-RDM from CISD calculation.
        cisd_one_rdm_a = numpy.array(cisd_wavefunction.get_opdm(
            0, 0, 'A', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)
        cisd_one_rdm_b = numpy.array(cisd_wavefunction.get_opdm(
            0, 0, 'B', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)

        # Get 2-RDM from CISD calculation.
        cisd_two_rdm_aa = numpy.array(cisd_wavefunction.get_tpdm(
            'AA', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        cisd_two_rdm_ab = numpy.array(cisd_wavefunction.get_tpdm(
            'AB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        cisd_two_rdm_bb = numpy.array(cisd_wavefunction.get_tpdm(
            'BB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)

        # Get overall RDMs.
        cisd_one_rdm, cisd_two_rdm = unpack_spatial_rdm(
            cisd_one_rdm_a, cisd_one_rdm_b, cisd_two_rdm_aa,
            cisd_two_rdm_ab, cisd_two_rdm_bb)

        # Store 1-RDM in molecule file, 2-RDM separately in other file.
        molecule.cisd_one_rdm = cisd_one_rdm
        molecule.cisd_two_rdm = cisd_two_rdm
        molecule.save()


# Perform exact diagonalization.
if False:
    set qc_module detci
    try:
        fci_energy, fci_wavefunction = energy('fci', return_wfn=True)
        if False:
            print('FCI energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, fci_energy))
    except:
        if False:
            print('WARNING: FCI calculation failed.')
        else:
            raise
    finally:
        # For the functions below, "a" and "b" refer to "up and "down" spins.
        molecule.fci_energy = fci_energy

        # Get 1-RDM from FCI calculation.
        fci_one_rdm_a = numpy.array(fci_wavefunction.get_opdm(
            0, 0, 'A', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)
        fci_one_rdm_b = numpy.array(fci_wavefunction.get_opdm(
            0, 0, 'B', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)

        # Get 2-RDM from FCI calculation.
        fci_two_rdm_aa = numpy.array(fci_wavefunction.get_tpdm(
            'AA', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        fci_two_rdm_ab = numpy.array(fci_wavefunction.get_tpdm(
            'AB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        fci_two_rdm_bb = numpy.array(fci_wavefunction.get_tpdm(
            'BB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)

        # Get overall RDMs.
        fci_one_rdm, fci_two_rdm = unpack_spatial_rdm(
            fci_one_rdm_a, fci_one_rdm_b,
            fci_two_rdm_aa, fci_two_rdm_ab, fci_two_rdm_bb)

        # Store 1-RDM in molecule file, 2-RDM separately in other file.
        molecule.fci_one_rdm = fci_one_rdm
        molecule.fci_two_rdm = fci_two_rdm
        molecule.save()


# Perform coupled cluster singles and doubles (CCSD) calculation.
if False:
    set qc_module ccenergy
    try:
        ccsd_energy = energy('ccsd')
        if False:
            print('CCSD energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, ccsd_energy))
    except:
        if False:
            print('WARNING: CCSD calculation failed.')
        else:
            raise
    else:
        molecule.ccsd_energy = ccsd_energy

        # Merge CC amplitudes into molecule by parsing
        psi_filename = outfile_name()
        single_cc_amplitudes, double_cc_amplitudes = (
            parse_psi4_ccsd_amplitudes(
                2 * molecule.n_orbitals,
                molecule.get_n_alpha_electrons(),
                molecule.get_n_beta_electrons(),
                psi_filename))

        molecule.ccsd_single_amps = single_cc_amplitudes
        molecule.ccsd_double_amps = double_cc_amplitudes
        molecule.save()
--------------------------------------------------------------------------

  Memory set to   7.451 GiB by Python driver.

Scratch directory: /tmp/

*** tstart() called on Philips-MacBook-Pro.local
*** at Mon Jun 27 02:18:33 2022

   => Loading Basis Set <=

    Name: STO-3G
    Role: ORBITAL
    Keyword: BASIS
    atoms 1-2 entry H          line    19 file /Users/philipniane/psi4conda/share/psi4/basis/sto-3g.gbs 


         ---------------------------------------------------------
                                   SCF
               by Justin Turney, Rob Parrish, Andy Simmonett
                          and Daniel G. A. Smith
                              RHF Reference
                        1 Threads,   7629 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c1
    Full point group: D_inf_h

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z               Mass       
    ------------   -----------------  -----------------  -----------------  -----------------
         H            0.000000000000     0.000000000000    -0.700000000000     1.007825032230
         H            0.000000000000     0.000000000000     0.700000000000     1.007825032230

  Running in c1 symmetry.

  Rotational constants: A = ************  B =     17.06810  C =     17.06810 [cm^-1]
  Rotational constants: A = ************  B = 511688.88416  C = 511688.88416 [MHz]
  Nuclear repulsion =    0.377983721907143

  Charge       = 0
  Multiplicity = 1
  Electrons    = 2
  Nalpha       = 1
  Nbeta        = 1

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS enabled.
  MOM disabled.
  Fractional occupation disabled.
  Guess Type is SAD.
  Energy threshold   = 1.00e-06
  Density threshold  = 1.00e-06
  Integral threshold = 1.00e-12

  ==> Primary Basis <==

  Basis Set: STO-3G
    Blend: STO-3G
    Number of shells: 2
    Number of basis functions: 2
    Number of Cartesian functions: 2
    Spherical Harmonics?: true
    Max angular momentum: 0

  ==> Integral Setup <==

  Using in-core PK algorithm.
   Calculation information:
      Number of atoms:                   2
      Number of AO shells:               2
      Number of primitives:              6
      Number of atomic orbitals:         2
      Number of basis functions:         2

      Integral cutoff                 1.00e-12
      Number of threads:                 1

  Performing in-core PK
  Using 12 doubles for integral storage.
  We computed 6 shell quartets total.
  Whereas there are 6 unique shell quartets.

  ==> DiskJK: Disk-Based J/K Matrices <==

    J tasked:                  Yes
    K tasked:                  Yes
    wK tasked:                  No
    Memory [MiB]:             5722
    Schwarz Cutoff:          1E-12

    OpenMP threads:              1

  Minimum eigenvalue in the overlap matrix is 7.0430092640E-01.
  Reciprocal condition number of the overlap matrix is 5.4356828739E-01.
    Using symmetric orthogonalization.

  ==> Pre-Iterations <==

  SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information).

   -------------------------
    Irrep   Nso     Nmo    
   -------------------------
     A          2       2 
   -------------------------
    Total       2       2
   -------------------------

  ==> Iterations <==

                        Total Energy        Delta E     RMS |[F,P]|

   @RHF iter SAD:    -0.57699169871890   -5.76992e-01   0.00000e+00 
   @RHF iter   1:    -0.94148065450138   -3.64489e-01   4.10898e-17 DIIS
   @RHF iter   2:    -0.94148065450138   -2.22045e-16   8.21796e-17 DIIS
  Energy and wave function converged.


  ==> Post-Iterations <==

    Orbital Energies [Eh]
    ---------------------

    Doubly Occupied:                                                      

       1A     -0.377323  

    Virtual:                                                              

       2A      0.258902  

    Final Occupation by Irrep:
              A 
    DOCC [     1 ]

  @RHF Final Energy:    -0.94148065450138

   => Energetics <=

    Nuclear Repulsion Energy =              0.3779837219071430
    One-Electron Energy =                  -1.8842831023785875
    Two-Electron Energy =                   0.5648187259700650
    Total Energy =                         -0.9414806545013796

Computation Completed


Properties will be evaluated at   0.000000,   0.000000,   0.000000 [a0]

Properties computed using the SCF density matrix

  Nuclear Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:     0.0000

  Electronic Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:     0.0000

  Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:     0.0000     Total:     0.0000

  Dipole Moment: [D]
     X:     0.0000      Y:     0.0000      Z:     0.0000     Total:     0.0000


*** tstop() called on Philips-MacBook-Pro.local at Mon Jun 27 02:18:34 2022
Module time:
	user time   =       0.15 seconds =       0.00 minutes
	system time =       0.01 seconds =       0.00 minutes
	total time  =          1 seconds =       0.02 minutes
Total time:
	user time   =       0.15 seconds =       0.00 minutes
	system time =       0.01 seconds =       0.00 minutes
	total time  =          1 seconds =       0.02 minutes

    Psi4 stopped on: Monday, 27 June 2022 02:18AM
    Psi4 wall time for execution: 0:00:00.97

*** Psi4 exiting successfully. Buy a developer a beer!
